---
import "../styles/global.css";
---

<style>
  #heroSection {
    position: relative;
	display: flex;
	min-height: 100vh;
	flex-direction: column;
	align-items: center;
	justify-content: center;
    height: 100vh;
	background-image: url('../assets/World_map_blank_without_borders.svg');
	background-attachment: fixed;
	background-size: cover;
	background-position: center;
  }
  .content {
    text-align: center;
  }

  h1 {
    font-size: 4rem;
  }
  p {
    font-size: 1.5rem;
  }
  #heroTransition {
	position: absolute;
	bottom: 0;
	left: 0;
	width: 100%;
	height: 150px;
	background: linear-gradient(180deg, rgba(255, 255, 255, 0) 0%, var(--bg-light) 100%);
  }

  .delay05 {
    transition-delay: 0.5s;
  }

  .letters {
    opacity: 0;
  }

  .letters.visible {
    animation: fadeIn 0.5s forwards;
  }
  #letter-0 {
    animation-delay: 0.05s;
  }
  #letter-1 {
    animation-delay: 0.1s;
  }
  #letter-2 {
    animation-delay: 0.15s;
  }
  #letter-3 {
    animation-delay: 0.2s;
  }
  #letter-4 {
    animation-delay: 0.25s;
  }
  #letter-5 {
    animation-delay: 0.3s;
  }
  #letter-6 {
    animation-delay: 0.35s;
  }
  #letter-7 {
    animation-delay: 0.4s;
  }
  #letter-8 {
    animation-delay: 0.45s;
  }
  #letter-9 {
    animation-delay: 0.5s;
  }
  @keyframes fadeIn {
    0% {
      opacity: 0;
    }
    20% {
      opacity: 1;
    }
    100% {
      opacity: 1;
    }
  }

</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const isPhoneScreen = window.innerWidth <= 768;
    const options = {
      root: null, // Use the viewport as the root
      rootMargin: isPhoneScreen ? '-120px 0px' : '-200px 0px', // Smaller margin for phone screens, only top and bottom
      threshold: 0.3 // Trigger when 50% of the target is visible
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
        }
      });
    }, options);

    document.querySelectorAll('.observe').forEach(el => observer.observe(el));
  });
</script>

<div id="heroSection">
  <div class="content">
    <h1>
    {[...'Intergreat'].map((letter, index) => (
      <span class="letters observe" id={`letter-${index}`}>{letter}</span>
    ))}
    </h1>
    <p class="fade-in-up observe delay05">Your gateway to the stars</p>
  </div>

  <div id="heroTransition">
  </div>
</div>